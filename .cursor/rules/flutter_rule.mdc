---
description: Guidline for writing flutter files
globs: *.dart
---
You are an expert in Flutter, Dart, Bloc, Freezed, go_router.

Key Principles

- Write concise, technical Dart code with accurate examples.
- Use functional and declarative programming patterns where appropriate.
- Prefer composition over inheritance.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported widget, subwidgets, helpers, static content, types.

Dart/Flutter

- Use const constructors for immutable widgets.
- Leverage Freezed for immutable state classes and unions.
- Use arrow syntax for simple functions and methods.
- Prefer expression bodies for one-line getters and setters.
- Use trailing commas for better formatting and diffs.
- When adding declarations or packages, add the code in alphabetical order
- If any text is added, use an internationalization keyword.
- For images, use the CachedImage widget.
- If the widget or its code grows too large, split it into a new widget.
- Don't set value additionally when value is default value

Error Handling and Validation

- Implement error handling in views using SelectableText.rich instead of SnackBars.
- Display errors in SelectableText.rich with red color for visibility.
- Handle empty states within the displaying screen.
- Manage error handling and loading states within Cubit states.

Bloc-Specific Guidelines

- Use Cubit for managing simple state and Bloc for complex event-driven state management.
- Extend states with Freezed for immutability.
- Use descriptive and meaningful event names for Bloc.
- Handle state transitions and side effects in Bloc's mapEventToState.
- Prefer context.read() or context.watch() for accessing Cubit/Bloc states in widgets.

Performance Optimization

- Use const widgets where possible to optimize rebuilds.
- Implement list view optimizations (e.g., ListView.builder).
- Use AssetImage for static images and cached_network_image for remote images.
- Optimize Firebase queries by using indexes and limiting query results.

Key Conventions

1. Use GoRouter for navigation and deep linking.
2. Optimize for Flutter performance metrics (first meaningful paint, time to interactive).
3. Prefer stateless widgets:
   - Use BlocBuilder for widgets that depend on Cubit/Bloc state.
   - Use BlocListener for handling side effects, such as navigation or showing dialogs.

UI and Styling

- Use Flutter's built-in widgets and create custom widgets.
- Implement responsive design using LayoutBuilder or MediaQuery.
- Use themes for consistent styling across the app.
- Use Theme.of(context).textTheme.titleLarge instead of headline6, and headlineSmall instead of headline5 etc.

Model and Database Conventions

- Include createdAt, updatedAt, and isDeleted fields in Firestore documents.
- Use @JsonSerializable(fieldRename: FieldRename.snake) for models.
- Implement @JsonKey(includeFromJson: true, includeToJson: false) for read-only fields.

Widgets and UI Components

- Create small, private widget classes instead of methods like Widget \_build....
- Implement RefreshIndicator for pull-to-refresh functionality.
- In TextFields, set appropriate textCapitalization, keyboardType, and textInputAction.
- Always include an errorBuilder when using Image.network.

Miscellaneous

- Use log instead of print for debugging.
- Use BlocObserver for monitoring state transitions during debugging.
- Keep lines no longer than 80 characters, adding commas before closing brackets for multi-parameter functions.
- Use @JsonValue(int) for enums that go to the database.

Code Generation

- Utilize build_runner for generating code from annotations (Freezed, JSON serialization).
- Run flutter pub run build_runner build --delete-conflicting-outputs after modifying annotated classes.

Documentation

- Document complex logic and non-obvious code decisions.
- Follow official Flutter, Bloc, and Firebase documentation for best practices.

Folder Structure
- You need to follow this folder structure.
```
lib
|____ui
| |____core
| | |____ui
| | | |____<shared widgets>
| | |____themes
| |____<FEATURE NAME>
| | |____view_model
| | | |_____<view_model class>.dart
| | |____widgets
| | | |____<feature name>_screen.dart
| | | |____<other widgets>
|____domain
| |____models
| | |____<model name>.dart
|____data
| |____repositories
| | |____<repository class>.dart
| |____services
| | |____<service class>.dart
| |____model
| | |____<api model class>.dart
|____config
|____utils
|____routing
|____main_staging.dart
|____main_development.dart
|____main.dart

// The test folder contains unit and widget tests
test
|____data
|____domain
|____ui
|____utils

// The testing folder contains mocks other classes need to execute tests
testing
|____fakes
|____models
```

Refer to Flutter, Bloc, and go_router documentation for Widgets, State Management, and Backend Integration best practices.
